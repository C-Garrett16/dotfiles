* Qtile Config (Master ORG for Tangle)
:PROPERTIES:
:header-args:python: :noweb yes :mkdirp yes :comments link
:END:

** Main Config
:PROPERTIES:
:header-args: :tangle ~/.config/qtile/config.py
:END:
#+BEGIN_SRC python
import os
import socket

host = os.getenv("QTILE_HOST") or socket.gethostname()

if "work" in host:
    from hosts.work import *
elif "home" in host:
    from hosts.home import *
else:
    from hosts.default import *
#+END_SRC


** Keybindings
:PROPERTIES:
:header-args: :tangle ~/.config/qtile/core/keys.py
:END:
#+BEGIN_SRC python
from libqtile.config import Key
from libqtile.lazy import lazy
import os

mod = "mod4"
terminal = "alacritty"
editor = "emacsclient -c -a 'vim'"

keys = [
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),
    Key([mod, "shift"], "Return", lazy.spawn("/home/cgreid/.local/bin/dmenu_launch.sh"), desc="Launch dmenu"),
    Key([mod], "Return", lazy.spawn(terminal), desc="Launch Terminal"),
    Key([mod, "shift"], "w", lazy.spawn("firefox"), desc="Launch Web Browser"),
    Key([mod], "e", lazy.spawn("thunar"), desc="Launch File Manager"),
    Key([mod], "Escape", lazy.spawn("~/.config/rofi/powermenu.sh"), desc="Power menu"),
    Key([mod, "shift"], "s", lazy.spawn("flameshot gui"), desc="Screenshot"),
    Key([mod, "shift"], "e", lazy.spawn(editor), desc="Doom Emacs"),
    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "shift"], "q", lazy.shutdown(), desc="Logout"),
    Key([mod], "h", lazy.layout.left(), desc="Focus left"),
    Key([mod], "l", lazy.layout.right(), desc="Focus right"),
    Key([mod], "j", lazy.layout.down(), desc="Focus down"),
    Key([mod], "k", lazy.layout.up(), desc="Focus up"),
    Key([mod, "shift"], "h", lazy.layout.shuffle_left(), desc="Move window left"),
    Key([mod, "shift"], "l", lazy.layout.shuffle_right(), desc="Move window right"),
    Key([mod, "shift"], "j", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "k", lazy.layout.shuffle_up(), desc="Move window up"),
    Key([mod], "Tab", lazy.next_layout(), desc="Toggle layout"),
]
#+END_SRC


** Layouts
:PROPERTIES:
:header-args: :tangle ~/.config/qtile/core/layouts.py
:END:
#+BEGIN_SRC python
from libqtile import layout

layouts = [
    layout.MonadTall(margin=10, border_focus="#bd93f9", border_width=2),
    layout.Columns(border_focus="#bd93f9", margin=4),
    layout.Max(),
]
#+END_SRC


** Widgets and Bar
:PROPERTIES:
:header-args: :tangle ~/.config/qtile/core/widgets.py
:END:
#+BEGIN_SRC python
from libqtile import bar, widget

widget_defaults = dict(
    font="JetBrainsMono Nerd Font",
    fontsize=13,
    padding=3,
)

def my_bar(groups, primary=False):
    widgets = [
        widget.GroupBox(visible_groups=groups,
                        highlight_method="block",
                        rounded=False,
                        active="#f8f8f2",
                        inactive="#6272a4",
                        highlight_color=["#282a36", "#44475a"],
                        this_current_screen_border="#bd93f9",
                        other_current_screen_border="#50fa7b",
                        disable_drag=True),
        widget.Prompt(),
        widget.WindowName(),
        widget.Clock(format='%a %b %d, %I:%M %p', foreground="#f1fa8c"),
    ]
    if primary:
        widgets.insert(3, widget.Systray())
        widgets.insert(3, widget.DF(partition='/', format='Disk: {uf} free', foreground="#8be9fd"))
        widgets.insert(3, widget.CPU(format='CPU: {load_percent}%', foreground="#50fa7b"))
        widgets.insert(3, widget.Memory(format='Mem: {MemUsed: .0f}M', foreground="#ff79c6"))
    return bar.Bar(widgets, 38, margin=[15, 20, 5, 20], border_width=2, border_color="#44475a", background="#282a36")
#+END_SRC


** Host: Work
:PROPERTIES:
:header-args: :tangle ~/.config/qtile/hosts/work.py
:END:
#+BEGIN_SRC python
from libqtile import hook, layout
from libqtile.config import Group, Screen, Match, Key
from libqtile.lazy import lazy
from core.keys import keys
from core.layouts import layouts
from core.widgets import my_bar
import os, subprocess

groups = [Group(str(i)) for i in range(1, 10)]

group_screen_map = {
    '4': 0, '5': 0, '6': 0,
    '7': 1, '8': 1, '9': 1,
    '1': 2, '2': 2, '3': 2
}

for group in groups:
    keys.extend([
        Key(["mod4"], group.name, lazy.to_screen(group_screen_map[group.name]), lazy.group[group.name].toscreen(), desc=f"Switch to group {group.name}"),
        Key(["mod4", "shift"], group.name, lazy.window.togroup(group.name), desc=f"Send window to group {group.name}"),
    ])

screens = [
    Screen(top=my_bar(['7', '8', '9'])),
    Screen(top=my_bar(['4', '5', '6'], primary=True)),
    Screen(top=my_bar(['1', '2', '3'])),
]

floating_layout = layout.Floating(float_rules=[*layout.Floating.default_float_rules, Match(wm_class="Conky")])

@hook.subscribe.startup_complete
def startup_complete_hook():
    subprocess.call([os.path.expanduser('~/.config/qtile/autostart.sh')])
    print("Moving groups on startup")
    qtile.groups_map['1'].cmd_toscreen(0)
    qtile.groups_map['4'].cmd_toscreen(1)
    qtile.groups_map['7'].cmd_toscreen(2)
#+END_SRC


** Host: Home
:PROPERTIES:
:header-args: :tangle ~/.config/qtile/hosts/home.py
:END:
#+BEGIN_SRC python
from libqtile import hook, layout
from libqtile.config import Group, Screen, Match, Key
from libqtile.lazy import lazy
from core.keys import keys
from core.layouts import layouts
from core.widgets import my_bar
import os, subprocess

groups = [Group(str(i)) for i in "123456789"]

for group in groups:
    keys.extend([
        Key(["mod4"], group.name, lazy.group[group.name].toscreen(toggle=True), desc=f"Switch to group {group.name}"),
        Key(["mod4", "shift"], group.name, lazy.window.togroup(group.name), desc=f"Send window to group {group.name}"),
    ])

screens = [
    Screen(top=my_bar(['1', '2', '3'], primary=True)),
    Screen(top=my_bar(['4', '5', '6'])),
]

floating_layout = layout.Floating(float_rules=[*layout.Floating.default_float_rules, Match(wm_class="Conky")])

@hook.subscribe.startup_once
def autostart():
    subprocess.call([os.path.expanduser('~/.config/qtile/autostart.sh')])
    qtile.groups_map['1'].cmd_toscreen(0)
    qtile.groups_map['4'].cmd_toscreen(1)
#+END_SRC

** Scripts
:PROPERTIES:
:header-args: :tangle ~/.local/bin/dmenu_launch.sh :shebang "#!/bin/bash"
:END:
#+begin_src bash
dmenu_run \
    -i \
    -fn "monospace-14" \
    -nb "#282a36" \
    -nf "#f8f8f2" \
    -sb "#bd93f9" \
    -sf "#282a36" \
    -x 20 \
    -y 15 \
    -z 1880 \
    -h 50
#+end_src
